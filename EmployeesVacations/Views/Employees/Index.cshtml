@model EmployeeViewModel

<title>Employees</title>
<div id="page-wrapper">
	<section>
		<div class="container">
			<div class="row">
				<div class="col-md-12">
					<div class="page-header">
						<h1>Employees</h1>
					</div>
				</div>
			</div>
			<div class="row">
				<div class="col-md-12">
					<div class="panel panel-default">
						<div class="panel-heading">
							<h3 class="panel-title">Employees</h3>
						</div>
						<div id="EmployeesTable"></div>
					</div>
				</div>
			</div>
		</div>
	</section>
</div>
<script>
	$(function () {
		'use strict';

		var tableContainer = $('#EmployeesTable').html("");
		var employeesTable = $('<table class="table table-striped table-hover"></table>').appendTo(tableContainer).DataTable({
			dom: '<"row"<"pull-left"l><"pull-right"f>>t<"panel-footer"<"row"<"pull-left"<"#dt-buttons">><"pull-right"p>>>',
			columns: [
				{ title: "@Html.DisplayNameFor(p => p.EmployeeId)", name: 'employeeId', data: 'employeeId' },
				{ title: "@Html.DisplayNameFor(p => p.Name)", name: 'name', data: 'name' },
				{
					title: "@Html.DisplayNameFor(p => p.Gender)", name: 'gender', data: 'gender',
					render: function (data, type) {
						return type === "display" || type === "filter" ?
							data == 0 ? 'Male': 'Female' :
							data;
					}
				},
				{
					title: "@Html.DisplayNameFor(p => p.Birthdate)", name: 'birthdate', data: 'birthdate',
					render: $.fn.dataTable.render.date()
				 },
				{ title: "@Html.DisplayNameFor(p => p.Email)", name: 'email', data: 'email' },
				{ title: "@Html.DisplayNameFor(p => p.Address)", name: 'address', data: 'address' },
				{
					title: "", name: 'actions', searchable: false, orderable: false,
					defaultContent:
					'<a type="button" class="btn btn-primary vacationsLink"><i class="fa fa-suitcase"></i> Vacations <span class="badge"></span></a> ' +
					'<button type="button" class="btn btn-info" data-action="editEmployee"><i class="fa fa-pencil-square-o"></i></button> ' +
					'<button type="button" class="btn btn-danger" data-action="removeEmployee"><i class="fa fa-user-times"></i></button>',
					createdCell: function (td, cellData, rowData, row, col) {
						$('.vacationsLink', td).attr('href', '/Vacations/' + rowData.employeeId).find('.badge').text(rowData.vacationsCount);
						$('[data-action="editEmployee"]', td).click(function () {
							cuFormLoad('/Employees/Edit/' + rowData.employeeId, "Edit Employee - " + rowData.name);
						});
						$('[data-action="removeEmployee"]', td).click(function () {
							bootbox.dialog({
								title: "Remove Employee - " + rowData.name,
								message: "Are you sure that you want to remove employee <strong>" + rowData.name + "</strong>?",
								buttons: {
									cancel: {
										label: "Cancel",
										className: "btn-default"
									},
									remove: {
										label: "Remove",
										className: "btn-danger",
										callback: function () {
											WMS.Ajax.Action('/Employees', 'Delete', {
												success: function () {
													employeesTable.ajax.reload($.noop, false);
												},
												data: { id: rowData.employeeId }
											});
										}
									}
								},
								onEscape: true
							});
						});
					}
				},
			],
			serverSide: true,
			ajax: {
				type: "POST",
				dataType: "json",
				url: "/Employees",
				data: {
					action: 'Get'
				}
			},
			initComplete: function () {
				var addButton = $('<button class="btn btn-primary" id="addEmployee"><i class="fa fa-user-plus"></i> Add Employee</button>').click(function () {
					var $this = $(this);
					cuFormLoad('/Employees/Add', $this.text());
				});
				addButton.appendTo('#EmployeesTable #dt-buttons');
			}
		});

		function cuFormLoad(url, title) {
			WMS.Ajax.Page.Get(url, function (form) {
				var $form = $(form);
				var $formSubmit = $form.find(':submit')
				$formSubmit.closest('.form-group').hide();
				$form.on('ajax:success', function () {
					dialog.modal('hide');
					employeesTable.ajax.reload($.noop, false);
				});
				var dialog = bootbox.dialog({
					title: title,
					className: 'employeeFormDialog',
					message: $form,
					size: 'large',
					buttons: {
						cancel: {
							label: "Cancel",
							className: "btn-default"
						},
						submit: {
							label: $formSubmit.text(),
							className: "btn-primary dialog-submit",
							callback: function () {
								$form.submit();
								return false;
							}
						}
					}
				});
			});

		}

	});
</script>